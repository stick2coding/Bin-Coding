(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{421:function(a,t,s){"use strict";s.r(t);var r=s(2),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),t("p",[a._v("多态的概念：通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。")]),a._v(" "),t("h3",{attrs:{id:"多态的前提"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态的前提"}},[a._v("#")]),a._v(" 多态的前提")]),a._v(" "),t("p",[a._v("两个对象存在继承关系；\n表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。")]),a._v(" "),t("h3",{attrs:{id:"多态的具体体现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态的具体体现"}},[a._v("#")]),a._v(" 多态的具体体现")]),a._v(" "),t("ul",[t("li",[a._v("编译类型和运行类型可以不一致；")]),a._v(" "),t("li",[a._v("定义一个对象，编译类型看等号左边，运行类型看等号右边；")]),a._v(" "),t("li",[a._v("如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。")])]),a._v(" "),t("h2",{attrs:{id:"多态的转型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态的转型"}},[a._v("#")]),a._v(" 多态的转型")]),a._v(" "),t("h3",{attrs:{id:"向上转型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向上转型"}},[a._v("#")]),a._v(" 向上转型")]),a._v(" "),t("p",[a._v("父类的引用指向子类的对象")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//右侧创建一个子类对象，把它当作父类看待使用")]),a._v("\n父类类型 引用名 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" 子类类型"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[t("strong",[a._v("注意：")])]),a._v(" "),t("ul",[t("li",[a._v("不能调用子类的特有成员")]),a._v(" "),t("li",[a._v("可以调用父类的所有成员")]),a._v(" "),t("li",[a._v("运行效果看子类方法的实现")])]),a._v(" "),t("h3",{attrs:{id:"向下转型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向下转型"}},[a._v("#")]),a._v(" 向下转型")]),a._v(" "),t("p",[a._v("一个已经向上转型的的子类对象，将父类引用转换为子类引用")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//右侧创建一个子类对象，把它当作父类看待使用")]),a._v("\n父类类型 引用名 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" 子类类型"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//用强制类型转换的格式，将父类引用类型转为子类引用类型")]),a._v("\n子类类型 引用名 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("子类类型"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" 父类引用"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[t("strong",[a._v("注意：")])]),a._v(" "),t("ul",[t("li",[a._v("只能转换父类的引用，不能转换父类的对象（即不能把一个父类的对象实例转为子类引用）")]),a._v(" "),t("li",[a._v("向下转型后可以使用子类的所有成员")])]),a._v(" "),t("h3",{attrs:{id:"转型异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转型异常"}},[a._v("#")]),a._v(" 转型异常")]),a._v(" "),t("p",[a._v("没有继承关系的对象在转型时就会异常 "),t("strong",[a._v("ClassCastException 类型转换异常")]),a._v("。")]),a._v(" "),t("h4",{attrs:{id:"instanceof-比较操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-比较操作符"}},[a._v("#")]),a._v(" instanceof 比较操作符")]),a._v(" "),t("p",[a._v("用来判断某个对象是否是另一个类型或者另一个类型的子类型，返回一个 boolean 类型的值。")]),a._v(" "),t("h3",{attrs:{id:"动态绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态绑定"}},[a._v("#")]),a._v(" 动态绑定")]),a._v(" "),t("p",[a._v("当调用对象方法的时候，该方法会和该对象的运行类型绑定")]),a._v(" "),t("h3",{attrs:{id:"应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[a._v("#")]),a._v(" 应用")]),a._v(" "),t("h4",{attrs:{id:"多态数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态数组"}},[a._v("#")]),a._v(" 多态数组")]),a._v(" "),t("p",[a._v("数组的定义类型为父类类型，里面保存的实际元素类型为子类类型。")]),a._v(" "),t("h4",{attrs:{id:"多态参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态参数"}},[a._v("#")]),a._v(" 多态参数")]),a._v(" "),t("p",[a._v("方法定义的形参类型为父类类型，实参类型允许为子类类型。")])])}),[],!1,null,null,null);t.default=v.exports}}]);